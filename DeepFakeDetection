{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c2ec99e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:26:59.959507Z",
     "iopub.status.busy": "2025-04-08T06:26:59.958953Z",
     "iopub.status.idle": "2025-04-08T06:27:02.457189Z",
     "shell.execute_reply": "2025-04-08T06:27:02.455903Z"
    },
    "papermill": {
     "duration": 2.506357,
     "end_time": "2025-04-08T06:27:02.459387",
     "exception": false,
     "start_time": "2025-04-08T06:26:59.953030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler  # <-- This was missing earlier!\n",
    "from tqdm import tqdm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70d89c06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.468973Z",
     "iopub.status.busy": "2025-04-08T06:27:02.468407Z",
     "iopub.status.idle": "2025-04-08T06:27:02.475617Z",
     "shell.execute_reply": "2025-04-08T06:27:02.473704Z"
    },
    "papermill": {
     "duration": 0.014526,
     "end_time": "2025-04-08T06:27:02.478064",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.463538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_images(folder, label, img_size=(64, 64)):\n",
    "    images = []\n",
    "    labels = []\n",
    "    for filename in tqdm(os.listdir(folder), desc=f\"Loading images from {folder}\"):\n",
    "        path = os.path.join(folder, filename)\n",
    "        img = cv2.imread(path)\n",
    "        if img is not None:\n",
    "            img = cv2.resize(img, img_size)\n",
    "            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convert to grayscale\n",
    "            images.append(img.flatten())\n",
    "            labels.append(label)\n",
    "    return images, labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "021c8c1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.488062Z",
     "iopub.status.busy": "2025-04-08T06:27:02.487708Z",
     "iopub.status.idle": "2025-04-08T06:27:02.497842Z",
     "shell.execute_reply": "2025-04-08T06:27:02.496628Z"
    },
    "papermill": {
     "duration": 0.017147,
     "end_time": "2025-04-08T06:27:02.499803",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.482656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available folders:\n",
      "['Dataset']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "base_path = \"/kaggle/input/deepfake-and-real-images\"\n",
    "print(\"Available folders:\")\n",
    "print(os.listdir(base_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "092a73e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.508264Z",
     "iopub.status.busy": "2025-04-08T06:27:02.507913Z",
     "iopub.status.idle": "2025-04-08T06:27:02.515980Z",
     "shell.execute_reply": "2025-04-08T06:27:02.514874Z"
    },
    "papermill": {
     "duration": 0.014245,
     "end_time": "2025-04-08T06:27:02.517834",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.503589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Folders inside Dataset:\n",
      "['Validation', 'Test', 'Train']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "dataset_path = \"/kaggle/input/deepfake-and-real-images/Dataset\"\n",
    "print(\"Folders inside Dataset:\")\n",
    "print(os.listdir(dataset_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54efef4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.526354Z",
     "iopub.status.busy": "2025-04-08T06:27:02.525942Z",
     "iopub.status.idle": "2025-04-08T06:27:02.543200Z",
     "shell.execute_reply": "2025-04-08T06:27:02.541970Z"
    },
    "papermill": {
     "duration": 0.023425,
     "end_time": "2025-04-08T06:27:02.544989",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.521564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ðŸ“‚ Contents of Train: ['Fake', 'Real']\n",
      "ðŸ“‚ Contents of Test: ['Fake', 'Real']\n",
      "ðŸ“‚ Contents of Validation: ['Fake', 'Real']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "base_path = \"/kaggle/input/deepfake-and-real-images/Dataset\"\n",
    "\n",
    "for split in [\"Train\", \"Test\", \"Validation\"]:\n",
    "    split_path = os.path.join(base_path, split)\n",
    "    print(f\"ðŸ“‚ Contents of {split}: {os.listdir(split_path)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "232fb0d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.554109Z",
     "iopub.status.busy": "2025-04-08T06:27:02.553742Z",
     "iopub.status.idle": "2025-04-08T06:27:02.558802Z",
     "shell.execute_reply": "2025-04-08T06:27:02.557642Z"
    },
    "papermill": {
     "duration": 0.011957,
     "end_time": "2025-04-08T06:27:02.560766",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.548809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "path_real = '/kaggle/input/deepfake-and-real-images/Dataset/Test/Real'\n",
    "path_fake = '/kaggle/input/deepfake-and-real-images/Dataset/Test/Fake'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "df71b1d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:27:02.569668Z",
     "iopub.status.busy": "2025-04-08T06:27:02.569262Z",
     "iopub.status.idle": "2025-04-08T06:28:34.156435Z",
     "shell.execute_reply": "2025-04-08T06:28:34.154594Z"
    },
    "papermill": {
     "duration": 91.5946,
     "end_time": "2025-04-08T06:28:34.159149",
     "exception": false,
     "start_time": "2025-04-08T06:27:02.564549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading images from /kaggle/input/deepfake-and-real-images/Dataset/Test/Real: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 5413/5413 [00:44<00:00, 121.48it/s]\n",
      "Loading images from /kaggle/input/deepfake-and-real-images/Dataset/Test/Fake: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 5492/5492 [00:46<00:00, 117.06it/s]\n"
     ]
    }
   ],
   "source": [
    "real_images, real_labels = load_images(path_real, label=0)  # 0 = Real\n",
    "fake_images, fake_labels = load_images(path_fake, label=1)  # 1 = Fake"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9d6bc99c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:28:34.256193Z",
     "iopub.status.busy": "2025-04-08T06:28:34.255853Z",
     "iopub.status.idle": "2025-04-08T06:28:34.295504Z",
     "shell.execute_reply": "2025-04-08T06:28:34.293873Z"
    },
    "papermill": {
     "duration": 0.090808,
     "end_time": "2025-04-08T06:28:34.298089",
     "exception": false,
     "start_time": "2025-04-08T06:28:34.207281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = np.array(real_images + fake_images)\n",
    "y = np.array(real_labels + fake_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26f5de20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:28:34.396172Z",
     "iopub.status.busy": "2025-04-08T06:28:34.395819Z",
     "iopub.status.idle": "2025-04-08T06:28:34.433841Z",
     "shell.execute_reply": "2025-04-08T06:28:34.432787Z"
    },
    "papermill": {
     "duration": 0.088941,
     "end_time": "2025-04-08T06:28:34.435999",
     "exception": false,
     "start_time": "2025-04-08T06:28:34.347058",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8c328136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:28:34.533506Z",
     "iopub.status.busy": "2025-04-08T06:28:34.533103Z",
     "iopub.status.idle": "2025-04-08T06:28:35.521520Z",
     "shell.execute_reply": "2025-04-08T06:28:35.520084Z"
    },
    "papermill": {
     "duration": 1.039143,
     "end_time": "2025-04-08T06:28:35.523964",
     "exception": false,
     "start_time": "2025-04-08T06:28:34.484821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a82b6c53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:28:35.620122Z",
     "iopub.status.busy": "2025-04-08T06:28:35.619754Z",
     "iopub.status.idle": "2025-04-08T06:29:49.145940Z",
     "shell.execute_reply": "2025-04-08T06:29:49.144515Z"
    },
    "papermill": {
     "duration": 73.622296,
     "end_time": "2025-04-08T06:29:49.195940",
     "exception": false,
     "start_time": "2025-04-08T06:28:35.573644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=5000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=5000)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=5000)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression(max_iter=5000)  # Increased from 1000 to 5000\n",
    "\n",
    "model.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "53ff7383",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:29:49.297097Z",
     "iopub.status.busy": "2025-04-08T06:29:49.296701Z",
     "iopub.status.idle": "2025-04-08T06:29:49.653067Z",
     "shell.execute_reply": "2025-04-08T06:29:49.651675Z"
    },
    "papermill": {
     "duration": 0.41002,
     "end_time": "2025-04-08T06:29:49.654970",
     "exception": false,
     "start_time": "2025-04-08T06:29:49.244950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X_test_scaled)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Real\", \"Fake\"])\n",
    "disp.plot(cmap='Blues')\n",
    "# plt.title(\"Confusion Matrix - DeepFake Image Detection\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1909705,
     "sourceId": 3134515,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7062621,
     "sourceId": 11294999,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 173.660382,
   "end_time": "2025-04-08T06:29:50.524041",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-08T06:26:56.863659",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
