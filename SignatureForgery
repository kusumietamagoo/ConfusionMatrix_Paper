{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "053e5a0e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:38.913497Z",
     "iopub.status.busy": "2025-04-08T06:24:38.913055Z",
     "iopub.status.idle": "2025-04-08T06:24:41.036516Z",
     "shell.execute_reply": "2025-04-08T06:24:41.034482Z"
    },
    "papermill": {
     "duration": 2.130819,
     "end_time": "2025-04-08T06:24:41.038761",
     "exception": false,
     "start_time": "2025-04-08T06:24:38.907942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, classification_report, ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8f40933",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:41.046595Z",
     "iopub.status.busy": "2025-04-08T06:24:41.046037Z",
     "iopub.status.idle": "2025-04-08T06:24:41.051255Z",
     "shell.execute_reply": "2025-04-08T06:24:41.049645Z"
    },
    "papermill": {
     "duration": 0.010948,
     "end_time": "2025-04-08T06:24:41.053142",
     "exception": false,
     "start_time": "2025-04-08T06:24:41.042194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "img_size = (128, 128)  # Resize for consistency\n",
    "path_real = \"/kaggle/input/signatures/real\"\n",
    "path_forged = \"/kaggle/input/signatures/forged\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c8be975",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:41.060182Z",
     "iopub.status.busy": "2025-04-08T06:24:41.059838Z",
     "iopub.status.idle": "2025-04-08T06:24:41.065549Z",
     "shell.execute_reply": "2025-04-08T06:24:41.064400Z"
    },
    "papermill": {
     "duration": 0.011287,
     "end_time": "2025-04-08T06:24:41.067417",
     "exception": false,
     "start_time": "2025-04-08T06:24:41.056130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_images(folder_path, label):\n",
    "    images = []\n",
    "    labels = []\n",
    "    for file in os.listdir(folder_path):\n",
    "        img_path = os.path.join(folder_path, file)\n",
    "        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
    "        if img is not None:\n",
    "            img = cv2.resize(img, img_size)\n",
    "            images.append(img.flatten())\n",
    "            labels.append(label)\n",
    "    return images, labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1fd45677",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:41.074499Z",
     "iopub.status.busy": "2025-04-08T06:24:41.074082Z",
     "iopub.status.idle": "2025-04-08T06:24:42.042682Z",
     "shell.execute_reply": "2025-04-08T06:24:42.041687Z"
    },
    "papermill": {
     "duration": 0.97406,
     "end_time": "2025-04-08T06:24:42.044416",
     "exception": false,
     "start_time": "2025-04-08T06:24:41.070356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "real_imgs, real_labels = load_images(path_real, 0)     # 0 = Real\n",
    "forged_imgs, forged_labels = load_images(path_forged, 1)  # 1 = Forged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c487434",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:42.052830Z",
     "iopub.status.busy": "2025-04-08T06:24:42.052442Z",
     "iopub.status.idle": "2025-04-08T06:24:42.060779Z",
     "shell.execute_reply": "2025-04-08T06:24:42.059114Z"
    },
    "papermill": {
     "duration": 0.01562,
     "end_time": "2025-04-08T06:24:42.063460",
     "exception": false,
     "start_time": "2025-04-08T06:24:42.047840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ðŸ“Œ Combine and prepare dataset\n",
    "X = np.array(real_imgs + forged_imgs)\n",
    "y = np.array(real_labels + forged_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c24a8d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:42.071786Z",
     "iopub.status.busy": "2025-04-08T06:24:42.071243Z",
     "iopub.status.idle": "2025-04-08T06:24:42.081374Z",
     "shell.execute_reply": "2025-04-08T06:24:42.079759Z"
    },
    "papermill": {
     "duration": 0.016734,
     "end_time": "2025-04-08T06:24:42.083827",
     "exception": false,
     "start_time": "2025-04-08T06:24:42.067093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ðŸ“Œ Split dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "da1d9f06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:42.091350Z",
     "iopub.status.busy": "2025-04-08T06:24:42.090895Z",
     "iopub.status.idle": "2025-04-08T06:24:43.160620Z",
     "shell.execute_reply": "2025-04-08T06:24:43.158893Z"
    },
    "papermill": {
     "duration": 1.07587,
     "end_time": "2025-04-08T06:24:43.162627",
     "exception": false,
     "start_time": "2025-04-08T06:24:42.086757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=1000)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ðŸ“Œ Train simple classifier\n",
    "clf = LogisticRegression(max_iter=1000)\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e213ca27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:43.171318Z",
     "iopub.status.busy": "2025-04-08T06:24:43.170911Z",
     "iopub.status.idle": "2025-04-08T06:24:43.187798Z",
     "shell.execute_reply": "2025-04-08T06:24:43.186415Z"
    },
    "papermill": {
     "duration": 0.023661,
     "end_time": "2025-04-08T06:24:43.189782",
     "exception": false,
     "start_time": "2025-04-08T06:24:43.166121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.60      0.69      0.64        13\n",
      "           1       0.56      0.45      0.50        11\n",
      "\n",
      "    accuracy                           0.58        24\n",
      "   macro avg       0.58      0.57      0.57        24\n",
      "weighted avg       0.58      0.58      0.58        24\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# ðŸ“Œ Predictions and confusion matrix\n",
    "y_pred = clf.predict(X_test)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1d13b8af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-08T06:24:43.201281Z",
     "iopub.status.busy": "2025-04-08T06:24:43.200709Z",
     "iopub.status.idle": "2025-04-08T06:24:43.570339Z",
     "shell.execute_reply": "2025-04-08T06:24:43.569039Z"
    },
    "papermill": {
     "duration": 0.377586,
     "end_time": "2025-04-08T06:24:43.572204",
     "exception": false,
     "start_time": "2025-04-08T06:24:43.194618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Real\", \"Forged\"])\n",
    "disp.plot(cmap=plt.cm.Blues)\n",
    "#plt.title(\"Confusion Matrix - Signature Detection\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7063416,
     "sourceId": 11295991,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.47243,
   "end_time": "2025-04-08T06:24:44.300017",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-08T06:24:35.827587",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
